const Exam = require("../models/exam");
const Question = require("../models/question");
const moment = require("moment-timezone"); // H·ªó tr·ª£ m√∫i gi·ªù

// üìå T·∫°o b√†i thi m·ªõi
exports.createExam = async (req, res) => {
  try {
    const { title, description, questions, timeLimit, startTime, endTime } = req.body;

    // Ki·ªÉm tra danh s√°ch c√¢u h·ªèi h·ª£p l·ªá
    const validQuestions = await Question.find({ _id: { $in: questions } });

    if (validQuestions.length !== questions.length) {
      return res.status(400).json({ message: "M·ªôt ho·∫∑c nhi·ªÅu c√¢u h·ªèi kh√¥ng h·ª£p l·ªá" });
    }

    // Ki·ªÉm tra c√¢u h·ªèi tr√πng l·∫∑p
    const uniqueQuestions = [...new Set(questions.map(q => q.toString()))];
    if (uniqueQuestions.length !== questions.length) {
      return res.status(400).json({ message: "Kh√¥ng ƒë∆∞·ª£c ph√©p th√™m c√¢u h·ªèi tr√πng l·∫∑p" });
    }

    // Ch·ªâ cho ph√©p d·∫°ng c√¢u h·ªèi `coding` v√† `debugging`
    const allowedTypes = ["coding", "debugging"];
    const invalidQuestions = validQuestions.filter(q => !allowedTypes.includes(q.type));
    if (invalidQuestions.length > 0) {
      return res.status(400).json({ message: "Ch·ªâ ƒë∆∞·ª£c th√™m c√¢u h·ªèi d·∫°ng coding ho·∫∑c debugging v√†o b√†i thi" });
    }

    // Chuy·ªÉn th·ªùi gian t·ª´ m√∫i gi·ªù +7 (Asia/Bangkok) sang UTC
    const startTimeUTC = moment.tz(startTime, "Asia/Bangkok").utc().toDate();
    const endTimeUTC = moment.tz(endTime, "Asia/Bangkok").utc().toDate();

    if (startTimeUTC >= endTimeUTC) {
      return res.status(400).json({ message: "Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc th·ªùi gian k·∫øt th√∫c" });
    }

    const newExam = new Exam({
      title,
      description,
      questions,
      timeLimit,
      startTime: startTimeUTC,
      endTime: endTimeUTC,
      createdBy: req.user.id,
    });

    await newExam.save();
    res.status(201).json({ message: "B√†i thi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng", exam: newExam });

  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
  }
};

// üìå L·∫•y danh s√°ch b√†i thi (ch·ªâ hi·ªÉn th·ªã b√†i thi ƒëang di·ªÖn ra)
exports.getAllExams = async (req, res) => {
  try {
    const nowUTC = moment().utc().toDate();

    const exams = await Exam.find({
      startTime: { $lte: nowUTC }, // Ch·ªâ l·∫•y b√†i thi ƒë√£ b·∫Øt ƒë·∫ßu
      endTime: { $gte: nowUTC }, // Ch·ªâ l·∫•y b√†i thi ch∆∞a k·∫øt th√∫c
    })
      .populate("createdBy", "username")
      .populate({
        path: "questions",
        select: "title language type difficulty",
      });

    const examsWithLocalTime = exams.map(exam => ({
      ...exam.toObject(),
      startTime: moment(exam.startTime).tz("Asia/Bangkok").format(),
      endTime: moment(exam.endTime).tz("Asia/Bangkok").format()
    }));

    res.json(examsWithLocalTime);
  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
  }
};

// üìå L·∫•y chi ti·∫øt b√†i thi theo ID (ch·ªâ hi·ªÉn th·ªã n·∫øu ƒëang trong th·ªùi gian l√†m b√†i)
exports.getExamById = async (req, res) => {
  try {
    const exam = await Exam.findById(req.params.id)
      .populate("createdBy", "username")
      .populate({
        path: "questions",
        select: "title description language type difficulty testCases buggyCode expectedOutput",
      });

    if (!exam) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i thi" });
    }

    const nowUTC = moment().utc().toDate();
    if (nowUTC < exam.startTime || nowUTC > exam.endTime) {
      return res.status(403).json({ message: "B√†i thi ch∆∞a b·∫Øt ƒë·∫ßu ho·∫∑c ƒë√£ k·∫øt th√∫c" });
    }

    res.json({
      ...exam.toObject(),
      startTime: moment(exam.startTime).tz("Asia/Bangkok").format(),
      endTime: moment(exam.endTime).tz("Asia/Bangkok").format()
    });

  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
  }
};

// üìå C·∫≠p nh·∫≠t b√†i thi
exports.updateExam = async (req, res) => {
  try {
    const { title, description, questions, timeLimit, startTime, endTime } = req.body;

    // Ki·ªÉm tra c√¢u h·ªèi h·ª£p l·ªá
    const validQuestions = await Question.find({ _id: { $in: questions } });

    if (validQuestions.length !== questions.length) {
      return res.status(400).json({ message: "M·ªôt ho·∫∑c nhi·ªÅu c√¢u h·ªèi kh√¥ng h·ª£p l·ªá" });
    }

    // Ki·ªÉm tra tr√πng l·∫∑p
    const uniqueQuestions = [...new Set(questions.map(q => q.toString()))];
    if (uniqueQuestions.length !== questions.length) {
      return res.status(400).json({ message: "Kh√¥ng ƒë∆∞·ª£c ph√©p th√™m c√¢u h·ªèi tr√πng l·∫∑p" });
    }

    // Ch·ªâ ch·∫•p nh·∫≠n `coding` v√† `debugging`
    const allowedTypes = ["coding", "debugging"];
    const invalidQuestions = validQuestions.filter(q => !allowedTypes.includes(q.type));
    if (invalidQuestions.length > 0) {
      return res.status(400).json({ message: "Ch·ªâ ƒë∆∞·ª£c th√™m c√¢u h·ªèi d·∫°ng coding ho·∫∑c debugging v√†o b√†i thi" });
    }

    // Chuy·ªÉn th·ªùi gian t·ª´ m√∫i gi·ªù +7 sang UTC
    const startTimeUTC = moment.tz(startTime, "Asia/Bangkok").utc().toDate();
    const endTimeUTC = moment.tz(endTime, "Asia/Bangkok").utc().toDate();

    if (startTimeUTC >= endTimeUTC) {
      return res.status(400).json({ message: "Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc th·ªùi gian k·∫øt th√∫c" });
    }

    const updatedExam = await Exam.findByIdAndUpdate(
      req.params.id,
      { title, description, questions, timeLimit, startTime: startTimeUTC, endTime: endTimeUTC },
      { new: true }
    );

    if (!updatedExam) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i thi" });
    }

    res.json({ message: "B√†i thi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng", exam: updatedExam });
  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
  }
};

// üìå X√≥a b√†i thi
exports.deleteExam = async (req, res) => {
  try {
    const deletedExam = await Exam.findByIdAndDelete(req.params.id);
    if (!deletedExam) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i thi" });
    }

    res.json({ message: "B√†i thi ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
  }
};
