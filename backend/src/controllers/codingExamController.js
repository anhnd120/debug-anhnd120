const CodingExam = require("../models/CodingExam");

const moment = require("moment-timezone"); // Th√™m th∆∞ vi·ªán h·ªó tr·ª£ m√∫i gi·ªù

exports.createCodingExam = async (req, res) => {
  try {
    const { title, questions, timeLimit, startTime, endTime } = req.body;

    if (!Array.isArray(questions) || questions.length === 0) {
      return res.status(400).json({ message: "B√†i thi ph·∫£i c√≥ √≠t nh·∫•t m·ªôt c√¢u h·ªèi" });
    }

    if (!startTime || !endTime || new Date(startTime) >= new Date(endTime)) {
      return res.status(400).json({ message: "Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc th·ªùi gian k·∫øt th√∫c" });
    }

    // Chuy·ªÉn startTime v√† endTime t·ª´ m√∫i gi·ªù +7 sang UTC
    const startTimeUTC = moment.tz(startTime, "Asia/Bangkok").utc().toDate();
    const endTimeUTC = moment.tz(endTime, "Asia/Bangkok").utc().toDate();

    const newExam = new CodingExam({
      title,
      questions,
      timeLimit,
      startTime: startTimeUTC,
      endTime: endTimeUTC,
      createdBy: req.user.id,
    });

    await newExam.save();
    res.status(201).json({ message: "B√†i thi l·∫≠p tr√¨nh ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng", exam: newExam });

  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};



// üìå L·∫•y danh s√°ch b√†i thi (c√≥ chi ti·∫øt c√¢u h·ªèi)
exports.getAllCodingExam = async (req, res) => {
  try {
    const nowUTC = moment().utc().toDate();

    const exams = await CodingExam.find({
      startTime: { $lte: nowUTC }, // Ch·ªâ l·∫•y b√†i thi ƒë√£ b·∫Øt ƒë·∫ßu
      endTime: { $gte: nowUTC }, // Ch·ªâ l·∫•y b√†i thi ch∆∞a k·∫øt th√∫c
    })
      .populate("createdBy", "username")
      .populate({
        path: "questions",
        select: "title language type difficulty",
      });

    // Chuy·ªÉn th·ªùi gian v·ªÅ m√∫i gi·ªù +7 tr∆∞·ªõc khi tr·∫£ v·ªÅ frontend
    const examsWithLocalTime = exams.map(exam => ({
      ...exam.toObject(),
      startTime: moment(exam.startTime).tz("Asia/Bangkok").format(),
      endTime: moment(exam.endTime).tz("Asia/Bangkok").format()
    }));

    res.json(examsWithLocalTime);
  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
  }
};


// üìå L·∫•y chi ti·∫øt b√†i thi theo ID (h·ªó tr·ª£ debugging)
exports.getCodingExamById = async (req, res) => {
  try {
    const exam = await CodingExam.findById(req.params.id)
      .populate("createdBy", "username")
      .populate({
        path: "questions",
        select: "title description language type difficulty testCases buggyCode expectedOutput",
      });

    if (!exam) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i thi" });
    }

    // Chuy·ªÉn startTime v√† endTime t·ª´ UTC sang GMT+7 tr∆∞·ªõc khi tr·∫£ v·ªÅ
    const startTimeLocal = moment(exam.startTime).tz("Asia/Bangkok").format();
    const endTimeLocal = moment(exam.endTime).tz("Asia/Bangkok").format();

    // Ki·ªÉm tra th·ªùi gian hi·ªán t·∫°i c√≥ n·∫±m trong kho·∫£ng thi kh√¥ng
    const nowUTC = moment().utc().toDate();
    if (nowUTC < exam.startTime || nowUTC > exam.endTime) {
      return res.status(403).json({ message: "B√†i thi ch∆∞a b·∫Øt ƒë·∫ßu ho·∫∑c ƒë√£ k·∫øt th√∫c" });
    }

    // Tr·∫£ v·ªÅ d·ªØ li·ªáu v·ªõi th·ªùi gian theo m√∫i gi·ªù GMT+7
    res.json({
      ...exam.toObject(),
      startTime: startTimeLocal,
      endTime: endTimeLocal
    });

  } catch (error) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
  }
};


